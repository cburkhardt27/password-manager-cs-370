{"version":3,"file":"preload.js","mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,QAAQ,I,kCCTXL,EAAOD,QAAUO,QAAQ,W,GCCrBC,EAA2B,CAAC,ECDhC,MAAM,cAAEC,EAAa,YAAEC,GDIvB,SAASC,EAAoBC,GAE5B,IAAIC,EAAeL,EAAyBI,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAab,QAGrB,IAAIC,EAASO,EAAyBI,GAAY,CAGjDZ,QAAS,CAAC,GAOX,OAHAe,EAAoBH,GAAUX,EAAQA,EAAOD,QAASW,GAG/CV,EAAOD,OACf,CCtBuC,CAAQ,KAYzCgB,EAAa,CACf,IAAAC,CAAKC,KAAYC,GACbT,EAAYO,KAAKC,KAAYC,EACjC,EACAC,OAAM,CAACF,KAAYC,IACRT,EAAYU,OAAOF,KAAYC,GAE1C,IAAAE,CAAKH,EAASI,GACVZ,EAAYW,KAAKH,GAAS,CAACK,KAAWJ,IAASG,KAAYH,IAC/D,EACA,EAAAK,CAAGN,EAASI,GACR,MAAMG,EAAe,CAACF,KAAWJ,IAASG,KAAYH,GAEtD,OADAT,EAAYc,GAAGN,EAASO,GACjB,KACHf,EAAYgB,eAAeR,EAASO,EAAa,CAEzD,EACA,KAAAE,CAAMT,GACFR,EAAYkB,mBAAmBV,EACnC,G,OAGJT,EAAcoB,kBAAkB,MAAOb,G","sources":["webpack://sprint-final/webpack/universalModuleDefinition","webpack://sprint-final/external node-commonjs \"electron\"","webpack://sprint-final/webpack/bootstrap","webpack://sprint-final/./main/preload.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, () => {\nreturn ","module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const { contextBridge, ipcRenderer } = require('electron')\n\n// Delete!\n/*\ncontextBridge.exposeInMainWorld('api', {\n  'set-title': () => ipcRenderer.send('set-title'),\n  initDB: () => ipcRenderer.invoke('init-db'),\n  addMasterPassword: () => ipcRenderer.invoke('add-master-password')\n})\n*/\n\n// Works! send('test') button\nconst ipcHandler = {\n    send(channel, ...args) {\n        ipcRenderer.send(channel, ...args);\n    },\n    invoke(channel, ...args) {\n        return ipcRenderer.invoke(channel, ...args);\n    },\n    once(channel, callback) {\n        ipcRenderer.once(channel, (_event, ...args) => callback(...args));\n    },\n    on(channel, callback) {\n        const subscription = (_event, ...args) => callback(...args)\n        ipcRenderer.on(channel, subscription);\n        return () => {\n            ipcRenderer.removeListener(channel, subscription);\n        };\n    },\n    clear(channel) {\n        ipcRenderer.removeAllListeners(channel);\n    }\n};\n\ncontextBridge.exposeInMainWorld('ipc', ipcHandler);\n"],"names":["root","factory","exports","module","define","amd","a","i","global","require","__webpack_module_cache__","contextBridge","ipcRenderer","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","ipcHandler","send","channel","args","invoke","once","callback","_event","on","subscription","removeListener","clear","removeAllListeners","exposeInMainWorld"],"sourceRoot":""}